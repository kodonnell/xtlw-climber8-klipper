; Disable old one so we get custom ordering (`index` doesn't seem to work, nor does appending existing sections to the
; end)
[menu __main __control]
type: disabled

[menu __main __motion]
enable: { printer.idle_timeout.state != "Printing" }
type: list
name: Motion
index: 0

[menu __main __motion __disable]
type: command
name: Steppers off
gcode:
    M84
    M18

; Homing
[menu __main __motion __home]
type: list
name: Home

[menu __main __motion __home __all]
type: command
name: Home all
gcode: G28

[menu __main __motion __home __homez]
type: command
name: Home Z
gcode: G28 Z

[menu __main __motion __home __homexy]
type: command
name: Home X/Y
gcode: G28 X Y

[menu __main __motion __tool]
type: input
name: Tool  : {menu.input|int if 'xyz' in printer.toolhead.homed_axes else 'unhomed'}
input: {0 if printer.toolhead.extruder == 'extruder' else 1}
input_min: 0
input_max: 1
input_step: 1
gcode:
    T{menu.input|int}


; Moving. To keep it tidy, I want to specify first the resolution, and then second the amount to move. To do this, we
; have to be a bit ... innovative = ) First, create a state gcode_macro which we use to save the delta amount. An input
; can change this. Then, in our input for changing position, we read this to get the delta amount. Now, it'd be much
; easier if klipper supported input templates, but it doesn't
; https://github.com/Klipper3d/klipper/blob/8a3727ef742f46923275ffca4651710952cfa114/klippy/extras/display/menu.py#L450
; so we have to set the input to be any integer, and do all the calculating on the fly. It's a bit gross, but hey, it
; works.
[gcode_macro __STATE]
variable_display_x_delta_mm: 1
variable_display_y_delta_mm: 1
variable_display_z_delta_mm: 1
variable_display_e_delta_mm: 1
gcode: 

[menu __main __motion __x_delta]
type: input
name: X step: {['0.01', '0.1','1','10'][menu.input|int]}
input: {printer['gcode_macro __STATE'].display_x_delta_mm}
input_min: 0
input_max: 3
input_step: 1
gcode:
    SET_GCODE_VARIABLE MACRO=__STATE VARIABLE=display_x_delta_mm VALUE={menu.input}

[menu __main __motion __x_move]
type: input
name: X     : {'%06.2f' % (printer.toolhead.axis_minimum.x + + menu.input * [0.01, 0.1, 1, 10][printer['gcode_macro __STATE'].display_x_delta_mm | int]) if 'x' in printer.toolhead.homed_axes else 'unhomed' }
input: { (printer.gcode_move.gcode_position.x - printer.toolhead.axis_minimum.x) / [0.01, 0.1, 1, 10][printer['gcode_macro __STATE'].display_x_delta_mm | int ] }
input_min: 0
input_max: 9999999
input_step: 1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{printer.toolhead.axis_minimum.x + menu.input * [0.01, 0.1, 1, 10][printer['gcode_macro __STATE'].display_x_delta_mm | int]}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __motion __y_delta]
type: input
name: Y step: {['0.01', '0.1','1','10'][menu.input|int]}
input: {printer['gcode_macro __STATE'].display_y_delta_mm}
input_min: 0
input_max: 3
input_step: 1
gcode:
    SET_GCODE_VARIABLE MACRO=__STATE VARIABLE=display_y_delta_mm VALUE={menu.input}

[menu __main __motion __y_move]
type: input
name: Y     : {'%06.2f' % (printer.toolhead.axis_minimum.y + menu.input * [0.01, 0.1, 1, 10][printer['gcode_macro __STATE'].display_y_delta_mm | int]) if 'y' in printer.toolhead.homed_axes else 'unhomed' }
input: { (printer.gcode_move.gcode_position.y - printer.toolhead.axis_minimum.y) / [0.01, 0.1, 1, 10][printer['gcode_macro __STATE'].display_y_delta_mm | int ] }
input_min: 0
input_max: 9999999
input_step: 1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{printer.toolhead.axis_minimum.y + menu.input * [0.01, 0.1, 1, 10][printer['gcode_macro __STATE'].display_y_delta_mm | int]}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __motion __z_delta]
type: input
name: Z step: {['0.01', '0.1','1','10'][menu.input|int]}
input: {printer['gcode_macro __STATE'].display_z_delta_mm}
input_min: 0
input_max: 3
input_step: 1
gcode:
    SET_GCODE_VARIABLE MACRO=__STATE VARIABLE=display_z_delta_mm VALUE={menu.input}

[menu __main __motion __z_move]
type: input
name: Z     : {'%06.2f' % (printer.toolhead.axis_minimum.z + menu.input * [0.01, 0.1, 1, 10][printer['gcode_macro __STATE'].display_z_delta_mm | int]) if 'z' in printer.toolhead.homed_axes else 'unhomed' }
input: { (printer.gcode_move.gcode_position.z - printer.toolhead.axis_minimum.z) / [0.01, 0.1, 1, 10][printer['gcode_macro __STATE'].display_z_delta_mm | int ] }
input_min: 0
input_max: 9999999
input_step: 1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{printer.toolhead.axis_minimum.z + menu.input * [0.01, 0.1, 1, 10][printer['gcode_macro __STATE'].display_z_delta_mm | int]}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __motion __e_delta]
type: input
name: E step: {['0.01', '0.1','1','10'][menu.input|int]}
input: {printer['gcode_macro __STATE'].display_e_delta_mm}
input_min: 0
input_max: 3
input_step: 1
gcode:
    SET_GCODE_VARIABLE MACRO=__STATE VARIABLE=display_e_delta_mm VALUE={menu.input}

[menu __main __motion __e_move]
type: input
name: E     : {'%+05.1f' % (menu.input * [0.01, 0.1, 1, 10][printer['gcode_macro __STATE'].display_e_delta_mm | int]) if printer[printer.toolhead.extruder].can_extrude else 'cold?' }
input: 0
input_min: -999999
input_max: 9999999
input_step: 1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input * [0.01, 0.1, 1, 10][printer['gcode_macro __STATE'].display_e_delta_mm | int]} F240
    RESTORE_GCODE_STATE NAME=__move__axis