#######################################################################################################################
# Display: BTT Mini 12864 Panel v1.0. In Marlin set as Fystec Mini 12864 v2.1 ...
#######################################################################################################################

[display]
lcd_type: uc1701
cs_pin: PB2
a0_pin: PE8
rst_pin: PE15
contrast: 63
encoder_pins: ^PD15, ^PD14
click_pin: ^!PE7
spi_software_miso_pin: PA6
spi_software_mosi_pin: PA7
spi_software_sclk_pin: PA5
display_group: _homescreen

[output_pin beeper]
pin: PB1

[neopixel btt_mini12864]
pin: PE14
chain_count: 3
color_order: RGB
initial_RED: 0.1
initial_GREEN: 0
initial_BLUE: 0

; No octoprint
[menu __main __octoprint]
type: disabled



[display_template _extruder_part_fan_speed]
text:


; Custom home screen:
[display_data _homescreen extruder]
position: 0, 0
text:
    ~extruder~
    { "{:<3.0f}".format(printer.extruder.temperature) }

[display_data _homescreen heater_bed]
position: 0, 7
text:
    { "%2.0f" % (printer.heater_bed.temperature,) }

[display_data _homescreen extruder1]
position: 0, 11
text:
    { "{:>3.0f}".format(printer.extruder1.temperature) }
    ~extruder~

[display_data _homescreen extruder_fan]
position: 1, 0
text:
    {% set speed = printer["gcode_macro M106"].extruder_part_fan_speed %}
    {% if speed > 0 %}
    ; animation!
      {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
      ~fan{frame}~
    {% else %}
      ~fan1~
    {% endif %}
    { "{:<3.0f}".format(speed * 100) }

[display_data _homescreen speed_factor]
position: 1, 6
text:
  { "{:>4.0%}".format(printer.gcode_move.speed_factor) }

[display_data _homescreen extruder1_fan]
position: 1, 11
text:
    {% set speed = printer["gcode_macro M106"].extruder1_part_fan_speed %}
    { "{:>3.0f}".format(speed * 100) }
    {% if speed > 0 %}
    ; animation!
      {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
      ~fan{frame}~
    {% else %}
      ~fan1~
    {% endif %}


[display_data _homescreen print_progress]
position: 2, 0
text: { "{:^10.0%}".format(printer.display_status.progress) }
[display_data _homescreen progress_bar]
position: 2, 1 # Draw graphical progress bar after text is written
text: { draw_progress_bar(2, 0, 10, printer.display_status.progress) }

[display_data _homescreen printing_time]
position: 2, 10
text: { "%6s" % (render("_printing_time").strip(),) }

[display_data _homescreen print_status]
position: 3, 0
text: { render("_print_status") }

; Live tuning
[menu __main __tune]
type: list
enable: True ; override to enable all the time
name: Tune

[menu __main __tune __offsetz]
type: input
name: Global Z: {'%05.3f' % menu.input}
input: {printer.save_variables.variables.get("global_offset_x", 0)|float}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    SET_OFFSETS GLOBAL_Z={'%.3f' % menu.input}
    APPLY_OFFSETS EXTRUDER={printer.toolhead.extruder} MOVE=1


[menu __main __tune __e1_offsetx]
type: input
name: E1 X    : {'%05.3f' % menu.input}
input: {printer.save_variables.variables.get("extruder1_offset_x", 0)|float}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    SET_GCODE_OFFSET EXTRUDER1_X={'%.3f' % menu.input} MOVE=1
    APPLY_OFFSETS EXTRUDER={printer.toolhead.extruder} MOVE=1

[menu __main __tune __e1_offsety]
type: input
name: E1 Y    : {'%05.3f' % menu.input}
input: {printer.save_variables.variables.get("extruder1_offset_y", 0)|float}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    SET_GCODE_OFFSET EXTRUDER1_Y={'%.3f' % menu.input} MOVE=1
    APPLY_OFFSETS EXTRUDER={printer.toolhead.extruder} MOVE=1

[menu __main __tune __e1_offsetz]
type: input
name: E1 Z    : {'%05.3f' % menu.input}
input: {printer.save_variables.variables.get("extruder1_offset_z", 0)|float}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    SET_GCODE_OFFSET EXTRUDER1_Z={'%.3f' % menu.input} MOVE=1
    APPLY_OFFSETS EXTRUDER={printer.toolhead.extruder} MOVE=1
