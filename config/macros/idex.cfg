; Stuff related to IDEX. Assumptions
;   - No duplicate/mirror mode i.e. only one extruder extruding at any given time.


; We want to calibrate our offsets live, and the only way to do this in klipper, and have them persist over restarts
; is to use save_variables
[save_variables]
filename: /opt/cfg/variables.klip


[gcode_macro PARK_EXTRUDER]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        action_raise_error("You can't park axes without homed axes!")
    {% endif %}
    SAVE_GCODE_STATE NAME=park
    G90
    G1 X-53 F7800
    RESTORE_GCODE_STATE NAME=park

[gcode_macro PARK_EXTRUDER1]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        action_raise_error("You can't park axes without homed axes!")
    {% endif %}
    SAVE_GCODE_STATE NAME=park
    G90
    G1 X258 F7800
    RESTORE_GCODE_STATE NAME=park

[gcode_macro SET_OFFSETS_EXTRUDER1]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set current_offset_x = svv.get("extruder1_offset_x", 0)|float %}
    {% set current_offset_y = svv.get("extruder1_offset_y", 0)|float %}
    {% set current_offset_z = svv.get("extruder1_offset_z", 0)|float %}
    {% if params.X is defined %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_x VALUE={ params.X|float }
    {% endif %}
    {% if params.Y is defined %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_y VALUE={ params.Y|float }
    {% endif %}
    {% if params.Z is defined %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_z VALUE={ params.Z|float }
    {% endif %}
    {% if params.X_ADJUST is defined %}
        {% set new_offset_x = params.X_ADJUST|float + current_offset_x %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_x VALUE={ new_offset_x |float }
    {% endif %}
    {% if params.Y_ADJUST is defined %}
        {% set new_offset_y = params.Y_ADJUST|float + current_offset_y %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_y VALUE={ new_offset_y|float }
    {% endif %}
    {% if params.Z_ADJUST is defined %}
        {% set new_offset_z = params.Z_ADJUST|float + current_offset_z %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_z VALUE={ new_offset_z|float }
    {% endif %}
    # If extruder1 is active, move
    {% if printer.toolhead.extruder == 'extruder1' %}
        APPLY_OFFSETS_EXTRUDER1
    {% endif %}

[gcode_macro APPLY_OFFSETS_EXTRUDER1]
gcode:
    {% if printer.toolhead.extruder == 'extruder1' %}
        {% set svv = printer.save_variables.variables %}
        {% set current_offset_x = svv.get("extruder1_offset_x", 0)|float %}
        {% set current_offset_y = svv.get("extruder1_offset_y", 0)|float %}
        {% set current_offset_z = svv.get("extruder1_offset_z", 0)|float %}
        SET_GCODE_OFFSET X={current_offset_x} Y={current_offset_y} Z={current_offset_z}
    {% endif %}

[gcode_macro T0]
gcode:
    ; Remove all offsets - do it now because e.g. the parks are defined with positions without offsets, etc.
    SET_GCODE_OFFSET X=0 Y=0 Z=0

    ; Park other toolhead if needed:
    {% if printer.toolhead.extruder == 'extruder1' %}
        PARK_EXTRUDER1
    {% endif %}
    
    ; Set the extruder fan to be the same speed as the current one, and turn this one off.
    M106 P0 S{printer["gcode_macro M106"].extruder1_part_fan_speed}
    M106 P1 S0
    
    ; Normal klippering
    ACTIVATE_EXTRUDER_ORIGINAL EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=0
    
    # SET_INPUT_SHAPER if nessesary, reset the input shaper after using the second extruder

[gcode_macro T1]
gcode:
    ; Offsets should all be zero (since we assume T0 came before), but issues it just to be sure. This will remove all
    ; offsets, which we do now because e.g. the parks are defined with positions without offsets, etc.
    SET_GCODE_OFFSET X=0 Y=0 Z=0
    
    ; Park other toolhead if needed:
    {% if printer.toolhead.extruder == 'extruder' %}
        PARK_EXTRUDER
    {% endif %}
    
    ; Set the extruder fan to be the same speed as the current one, and turn this one off.
    M106 P1 S{printer["gcode_macro M106"].extruder_part_fan_speed}
    M106 P0 S0
    
    ; Normal klippering
    ACTIVATE_EXTRUDER_ORIGINAL EXTRUDER=extruder1
    SET_DUAL_CARRIAGE CARRIAGE=1

    ; Set offsets
    APPLY_OFFSETS_EXTRUDER1

    # SET_INPUT_SHAPER if nessesary, reset the input shaper after using the second extruder


# [gcode_macro calibrate_separation]
# gcode:
#     G28
#     G90
#     M83
#     T0 ; test T0
#     G1 X120 Y150 Z.2 F4800
#     G1 Y75 E10
#     T1 ; test T1
#     G1 X120 Y0 Z.2
#     G1 Y75 E10


[gcode_macro ACTIVATE_EXTRUDER]
rename_existing: ACTIVATE_EXTRUDER_ORIGINAL
gcode:
    {% if params.EXTRUDER == 'extruder' %}
        T0
    {% else %}
        T1
    {% endif %}