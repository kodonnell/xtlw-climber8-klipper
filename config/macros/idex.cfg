; Stuff related to IDEX. Assumptions
;   - No duplicate/mirror mode i.e. only one extruder extruding at any given time.


; We want to calibrate our offsets live, and the only way to do this in klipper, and have them persist over restarts
; is to use save_variables
[save_variables]
filename: /opt/cfg/variables.klip


[gcode_macro PARK]
gcode:
    RESPOND MSG="Parking {params.EXTRUDER}"
    {% if "xyz" not in printer.toolhead.homed_axes %}
        { action_raise_error("You can't park axes without homed axes!") }
    {% endif %}
    {% if printer.toolhead.extruder != params.EXTRUDER %}
        { action_raise_error("You can't park extruder when it's not the current active extruder!") }
    {% endif %}
    SAVE_GCODE_STATE NAME=park
    G90
    {% if params.EXTRUDER == 'extruder' %}
        G1 X-53 F7800
    {% elif params.EXTRUDER == 'extruder1' %}
        G1 X258 F7800
    {% elif params.EXTRUDER is not defined %}
        { action_raise_error("Please provide an EXTRUDER= argument to PARK") }
    {% else %}
        { action_raise_error("Unknown extruder {params.EXTRUDER}") }
    {% endif %}
    RESTORE_GCODE_STATE NAME=park

[gcode_macro PARK_CURRENT]
gcode:
    PARK EXTRUDER={printer.toolhead.extruder}

[gcode_macro PARK_BOTH]
gcode:
    RESPOND MSG="Parking both extruders"
    ; The simplest was to do this is to just activate T0/T1 as these have parking build in already, and take care of
    ; the offsets etc. We try to ensure this preserves the currently active extruder, but no guarantees:
    {% if printer.toolhead.extruder == "extruder1" %}
        T0 PRIME=0
        T1 PRIME=0
    {% else %}
        T1 PRIME=0
        T0 PRIME=0
    {% endif %}


; Offsets, both for IDEX and overall Z (as normal Z offsets are overriden when we do E1 offsets, as we're using
; absolutes).
[gcode_macro SET_OFFSETS]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set current_x1 = svv.get("extruder1_offset_x", 0)|float %}
    {% set current_y1 = svv.get("extruder1_offset_y", 0)|float %}
    {% set current_z1 = svv.get("extruder1_offset_z", 0)|float %}
    {% set current_z = svv.get("global_offset_z", 0)|float %}
    {% if params.X1 is defined %}
        {% set new_offset = params.X1|float|round(4) %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_x VALUE={new_offset}
        RESPOND MSG="Saved extruder1 X offset as {new_offset}"
    {% endif %}
    {% if params.Y1 is defined %}
        {% set new_offset = params.Y1|float|round(4) %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_y VALUE={new_offset}
        RESPOND MSG="Saved extruder1 Y offset as {new_offset}"
    {% endif %}
    {% if params.Z1 is defined %}
        {% set new_offset = params.Z1|float|round(4) %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_z VALUE={new_offset}
        RESPOND MSG="Saved extruder1 Z offset as {new_offset}"
    {% endif %}
    {% if params.Z is defined %}
        {% set new_offset = params.Z|float|round(4) %}
        SAVE_VARIABLE VARIABLE=global_offset_z VALUE={new_offset}
        RESPOND MSG="Saved global Z offset as {new_offset}"
    {% endif %}

[gcode_macro APPLY_OFFSETS]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set x1 = svv.get("extruder1_offset_x", 0)|float %}
    {% set y1 = svv.get("extruder1_offset_y", 0)|float %}
    {% set z1 = svv.get("extruder1_offset_z", 0)|float %}
    {% set z = svv.get("global_offset_z", 0)|float %}
    {% set move = params.MOVE|default(0)|int %}
    {% if params.EXTRUDER == 'extruder' %}
        SET_GCODE_OFFSET X=0 Y=0 Z={z} MOVE={move}
    {% elif params.EXTRUDER == 'extruder1' %}
        {% set offset_z = z1 + z %}
        SET_GCODE_OFFSET X={x1} Y={y1} Z={offset_z} MOVE={move}
    {% elif params.EXTRUDER is not defined %}
        { action_raise_error("Please provide an EXTRUDER= argument to APPLY_OFFSETS") }
    {% else %}
        { action_raise_error("Unknown extruder {params.EXTRUDER}") }
    {% endif %}

[gcode_macro _T]
variable_autopark_default: 1
gcode:
    {% set extruder=params.EXTRUDER|default('') %}
    {% set autopark=(params.AUTOPARK|default(autopark_default)|int == 1) %}
    {% set other_extruder='' %}
    {% set carriage=-1 %}
    {% set extruder_fan=-1 %}
    {% set other_extruder_fan=-1 %}
    {% if extruder == 'extruder' %}
        {% set other_extruder='extruder1' %}
        {% set carriage=0 %}
        {% set extruder_fan=0 %}
        {% set other_extruder_fan=1 %}
    {% elif extruder == 'extruder1' %}
        {% set other_extruder='extruder' %}
        {% set carriage=1 %}
        {% set extruder_fan=1 %}
        {% set other_extruder_fan=0 %}
    {% elif extruder == '' %}
        { action_raise_error("Please provide an EXTRUDER= argument to _T") }
    {% else %}
        { action_raise_error("Unknown extruder {extruder}") }
    {% endif %}

    ; Remove all offsets - do it now because e.g. the parks are defined with positions without offsets, etc.
    SET_GCODE_OFFSET X=0 Y=0 Z=0

    ; Park the current toolhead if needed:
    {% if autopark and printer.toolhead.extruder == other_extruder and "xyz" in printer.toolhead.homed_axes %}
        PARK EXTRUDER={other_extruder}
    {% endif %}

    ; Set the extruder fan to be the same speed as the current one, and turn this one off.
    {% set m106_speed = (printer["gcode_macro M106"]["%s_part_fan_speed_normalized" % other_extruder] | float) * 255 %}
    M106 P{extruder_fan} S{m106_speed}
    M107 P{other_extruder_fan}

    ; Normal klippering
    ACTIVATE_EXTRUDER_ORIGINAL EXTRUDER={extruder}
    SET_DUAL_CARRIAGE CARRIAGE={carriage}

    ; Apply our offsets:
    APPLY_OFFSETS EXTRUDER={extruder}


[gcode_macro PRIME_NOZZLE]
gcode:
    {% set extruder=params.EXTRUDER %}
    {% set y = printer.toolhead.axis_minimum.y + 5 %}
    {% set left = 20 %}
    {% set right = printer.toolhead.axis_maximum.x - 20 %}
    {% set e = (right - left) * 0.2 %}
    # {% set e = (right - left) * 0.25 %}
    {% if extruder == 'extruder' %}
        {% set x0 = left %}
        {% set x1 = right %}
    {% else %}
        {% set y = y - 2 %}
        ; Switch x's around
        {% set x0 = right %}
        {% set x1 = left %}
    {% endif %}
    ; Only prime if z is < 1 as we should only do this at the start of the print
    {% set z = printer.toolhead.position.z %}
    {% set z_raised = z + 1 %}
    {% if z <= 1 %}

        SAVE_GCODE_STATE NAME=PRIME_NOZZLE

        RESPOND MSG="Priming {extruder}"
        ; Lift up while we move
        G1 F300 Z1
        ; Go to start:
        G1 Y{y} F3600
        G1 X{x0} F3600
        ; Drop to print height
        G1 F300 Z0.25
        ; Extrude along
        M83 ; relative
        G1 X{x1} Y{y} E{e} F1000
        ; Retract a little before we start the skirt
        G1 E-3 F1800
        ; Lift up a bit again:
        G1 F300 Z2

        RESTORE_GCODE_STATE NAME=PRIME_NOZZLE
    {% else %}
        RESPOND MSG="NOT priming {extruder} - z needs to be < 1"
    {% endif %}

[gcode_macro T0]
variable_ready_to_prime: 0
variable_primed: 0
gcode:
    _T EXTRUDER=extruder
    ; Prime if it hasn't been and we don't explicitly want to avoid it:
    {% set prime=params.PRIME|default(1)|int %}
    {% if prime == 1 and printer["gcode_macro T0"].ready_to_prime == 1 and printer["gcode_macro T0"].primed == 0 %}
        PRIME_NOZZLE EXTRUDER=extruder
        SET_GCODE_VARIABLE MACRO=T0 VARIABLE=primed VALUE=1
    {% endif %}


[gcode_macro T1]
variable_ready_to_prime: 0
variable_primed: 0
gcode:
    _T EXTRUDER=extruder1
    ; Prime if it hasn't been and we don't explicitly want to avoid it:
    {% set prime=params.PRIME|default(1)|int %}
    {% if prime == 1 and printer["gcode_macro T1"].ready_to_prime == 1 and printer["gcode_macro T1"].primed == 0 %}
        PRIME_NOZZLE EXTRUDER=extruder1
        SET_GCODE_VARIABLE MACRO=T1 VARIABLE=primed VALUE=1
    {% endif %}

[gcode_macro ACTIVATE_EXTRUDER]
rename_existing: ACTIVATE_EXTRUDER_ORIGINAL
gcode:
    {% if params.EXTRUDER == 'extruder' %}
        T0
    {% elif params.EXTRUDER == 'extruder1' %}
        T1
    {% elif params.EXTRUDER is not defined %}
        { action_raise_error("Please provide an EXTRUDER= argument to ACTIVATE_EXTRUDER") }
    {% else %}
        { action_raise_error("Unknown extruder {params.EXTRUDER}") }
    {% endif %}