; Stuff related to IDEX. Assumptions
;   - No duplicate/mirror mode i.e. only one extruder extruding at any given time.


; We want to calibrate our offsets live, and the only way to do this in klipper, and have them persist over restarts
; is to use save_variables
[save_variables]
filename: /opt/cfg/variables.klip


[gcode_macro PARK_EXTRUDER]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        { action_raise_error("You can't park axes without homed axes!") }
    {% endif %}
    SAVE_GCODE_STATE NAME=park
    G90
    G1 X-53 F7800
    RESTORE_GCODE_STATE NAME=park

[gcode_macro PARK_EXTRUDER1]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        { action_raise_error("You can't park axes without homed axes!") }
    {% endif %}
    SAVE_GCODE_STATE NAME=park
    G90
    G1 X258 F7800
    RESTORE_GCODE_STATE NAME=park

; Offsets, both for IDEX and overall Z (as normal Z offsets are overriden when we do E1 offsets, as we're using
; absolutes). 
[gcode_macro SET_OFFSETS]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set current_x1 = svv.get("extruder1_offset_x", 0)|float %}
    {% set current_y1 = svv.get("extruder1_offset_y", 0)|float %}
    {% set current_z1 = svv.get("extruder1_offset_z", 0)|float %}
    {% set current_z = svv.get("global_offset_z", 0)|float %}
    {% if params.X1 is defined %}
        {% set new_offset = params.X1|float|round(4) %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_x VALUE={new_offset}
        { action_respond_info("Saved extruder1 X offset as %.4f" % new_offset)}
    {% elif params.X1_ADJUST is defined %}
        {% set new_offset = (params.X1_ADJUST|float + current_x1)|round(4) %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_x VALUE={new_offset}
        { action_respond_info("Saved extruder1 X offset as %.4f" % new_offset) }
    {% endif %}
    {% if params.Y1 is defined %}
        {% set new_offset = params.Y1|float|round(4) %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_y VALUE={new_offset}
        { action_respond_info("Saved extruder1 Y offset as %.4f" % new_offset)}
    {% elif params.Y1_ADJUST is defined %}
        {% set new_offset = (params.Y1_ADJUST|float + current_y1)|round(4) %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_y VALUE={new_offset}
        { action_respond_info("Saved extruder1 Y offset as %.4f" % new_offset) }
    {% endif %}
    {% if params.Z1 is defined %}
        {% set new_offset = params.Z1|float|round(4) %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_z VALUE={new_offset}
        { action_respond_info("Saved extruder1 Z offset as %.4f" % new_offset)}
    {% elif params.Z1_ADJUST is defined %}
        {% set new_offset = (params.Z1_ADJUST|float + current_z1)|round(4) %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_z VALUE={ new_offset }
        { action_respond_info("Saved extruder1 Z offset as %.4f" % new_offset) }
    {% endif %}
    {% if params.Z is defined %}
        {% set new_offset = params.Z|float|round(4) %}
        SAVE_VARIABLE VARIABLE=global_offset_z VALUE={new_offset}
        { action_respond_info("Saved global Z offset as %.4f" % new_offset) }
    {% elif params.Z_ADJUST is defined %}
        {% set new_offset = (params.Z_ADJUST|float + current_z)|round(4) %}
        SAVE_VARIABLE VARIABLE=global_offset_z VALUE={new_offset}
        { action_respond_info("Saved global Z offset as %.4f" % new_offset)}
    {% endif %}

[gcode_macro APPLY_OFFSETS]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set current_extruder1_offset_x = svv.get("extruder1_offset_x", 0)|float %}
    {% set current_extruder1_offset_y = svv.get("extruder1_offset_y", 0)|float %}
    {% set current_extruder1_offset_z = svv.get("extruder1_offset_z", 0)|float %}
    {% set current_global_offset_z = svv.get("global_offset_z", 0)|float %}
    {% set move = params.MOVE|default(0)|int %}
    {% if params.EXTRUDER == 'extruder' %}
        SET_GCODE_OFFSET X=0 Y=0 Z={current_global_offset_z} MOVE={move}
        { action_respond_info("Extruder is 'extruder' so setting gcode offsets to X=0 Y=0 Z=%.3f MOVE=%d" % (current_global_offset_z, move))}
    {% elif params.EXTRUDER == 'extruder1' %}
        SET_GCODE_OFFSET X={current_extruder1_offset_x} Y={current_extruder1_offset_y} Z={current_extruder1_offset_z + current_global_offset_z} MOVE={move}
        { action_respond_info("Extruder is 'extruder1' so setting gcode offsets to X=%.3f Y=%.3f Z=%.3f MOVE=%d" % (current_extruder1_offset_x, current_extruder1_offset_y, current_global_offset_z + current_extruder1_offset_z, move))}
    {% elif params.EXTRUDER is not defined %}
        { action_raise_error("Please provide an EXTRUDER= argument to APPLY_OFFSETS") }
    {% else %}
        { action_raise_error("Unknown extruder {params.EXTRUDER}") }
    {% endif %}

[gcode_macro T0]
gcode:
    ; Remove all offsets - do it now because e.g. the parks are defined with positions without offsets, etc.
    SET_GCODE_OFFSET X=0 Y=0 Z=0

    ; Park other toolhead if needed:
    {% if printer.toolhead.extruder == 'extruder1' %}
        PARK_EXTRUDER1
    {% endif %}
    
    ; Set the extruder fan to be the same speed as the current one, and turn this one off.
    M106 P0 S{printer["gcode_macro M106"].extruder1_part_fan_speed}
    M106 P1 S0
    
    ; Normal klippering
    ACTIVATE_EXTRUDER_ORIGINAL EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=0

    ; Apply our offsets:
    APPLY_OFFSETS EXTRUDER=extruder
    
    # SET_INPUT_SHAPER if nessesary, reset the input shaper after using the second extruder

[gcode_macro T1]
gcode:
    ; Remove all offsets - do it now because e.g. the parks are defined with positions without offsets, etc.
    SET_GCODE_OFFSET X=0 Y=0 Z=0
    
    ; Park other toolhead if needed:
    {% if printer.toolhead.extruder == 'extruder' %}
        PARK_EXTRUDER
    {% endif %}
    
    ; Set the extruder fan to be the same speed as the current one, and turn this one off.
    M106 P1 S{printer["gcode_macro M106"].extruder_part_fan_speed}
    M106 P0 S0
    
    ; Normal klippering
    ACTIVATE_EXTRUDER_ORIGINAL EXTRUDER=extruder1
    SET_DUAL_CARRIAGE CARRIAGE=1

    ; Apply our offsets:
    APPLY_OFFSETS EXTRUDER=extruder1
    
    # SET_INPUT_SHAPER if nessesary, reset the input shaper after using the second extruder


# [gcode_macro calibrate_separation]
# gcode:
#     G28
#     G90
#     M83
#     T0 ; test T0
#     G1 X120 Y150 Z.2 F4800
#     G1 Y75 E10
#     T1 ; test T1
#     G1 X120 Y0 Z.2
#     G1 Y75 E10


[gcode_macro ACTIVATE_EXTRUDER]
rename_existing: ACTIVATE_EXTRUDER_ORIGINAL
gcode:
    {% if params.EXTRUDER == 'extruder' %}
        T0
    {% elif params.EXTRUDER == 'extruder1' %}
        T1
    {% elif params.EXTRUDER is not defined %}
        { action_raise_error("Please provide an EXTRUDER= argument to ACTIVATE_EXTRUDER") }
    {% else %}
        { action_raise_error("Unknown extruder {params.EXTRUDER}") }
    {% endif %}