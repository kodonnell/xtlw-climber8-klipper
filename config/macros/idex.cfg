; Stuff related to IDEX. Assumptions
;   - No duplicate/mirror mode i.e. only one extruder extruding at any given time.


; We want to calibrate our offsets live, and the only way to do this in klipper, and have them persist over restarts
; is to use save_variables
[save_variables]
filename: /opt/cfg/variables.klip


[gcode_macro PARK]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        { action_raise_error("You can't park axes without homed axes!") }
    {% endif %}
    {% if printer.toolhead.extruder != params.EXTRUDER %}
        { action_raise_error("You can't park extruder when it's not the current active extruder!") }
    {% endif %}
    SAVE_GCODE_STATE NAME=park
    G90
    {% if params.EXTRUDER == 'extruder' %}
        G1 X-53 F7800
    {% elif params.EXTRUDER == 'extruder1' %}
        G1 X258 F7800
    {% elif params.EXTRUDER is not defined %}
        { action_raise_error("Please provide an EXTRUDER= argument to PARK") }
    {% else %}
        { action_raise_error("Unknown extruder {params.EXTRUDER}") }
    {% endif %}
    RESTORE_GCODE_STATE NAME=park

[gcode_macro PARK_BOTH]
gcode:
    ; The simplest was to do this is to just activate T0/T1 as these have parking build in already, and take care of
    ; the offsets etc. We try to ensure this preserves the currently active extruder, but no guarantees:
    {% if printer.toolhead.extruder == "extruder1" %}
        T0
        T1
    {% else %}
        T1
        T0
    {% endif %}


; Offsets, both for IDEX and overall Z (as normal Z offsets are overriden when we do E1 offsets, as we're using
; absolutes). 
[gcode_macro SET_OFFSETS]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set current_x1 = svv.get("extruder1_offset_x", 0)|float %}
    {% set current_y1 = svv.get("extruder1_offset_y", 0)|float %}
    {% set current_z1 = svv.get("extruder1_offset_z", 0)|float %}
    {% set current_z = svv.get("global_offset_z", 0)|float %}
    {% if params.X1 is defined %}
        {% set new_offset = params.X1|float|round(4) %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_x VALUE={new_offset}
        RESPOND MSG="Saved extruder1 X offset as {new_offset}"
    {% elif params.X1_ADJUST is defined %}
        {% set new_offset = (params.X1_ADJUST|float + current_x1)|round(4) %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_x VALUE={new_offset}
        RESPOND MSG="Saved extruder1 X offset as {new_offset}"
    {% endif %}
    {% if params.Y1 is defined %}
        {% set new_offset = params.Y1|float|round(4) %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_y VALUE={new_offset}
        RESPOND MSG="Saved extruder1 Y offset as {new_offset}"
    {% elif params.Y1_ADJUST is defined %}
        {% set new_offset = (params.Y1_ADJUST|float + current_y1)|round(4) %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_y VALUE={new_offset}
        RESPOND MSG="Saved extruder1 Y offset as {new_offset}"
    {% endif %}
    {% if params.Z1 is defined %}
        {% set new_offset = params.Z1|float|round(4) %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_z VALUE={new_offset}
        RESPOND MSG="Saved extruder1 Z offset as {new_offset}"
    {% elif params.Z1_ADJUST is defined %}
        {% set new_offset = (params.Z1_ADJUST|float + current_z1)|round(4) %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_z VALUE={ new_offset }
        RESPOND MSG="Saved extruder1 Z offset as {new_offset}"
    {% endif %}
    {% if params.Z is defined %}
        {% set new_offset = params.Z|float|round(4) %}
        SAVE_VARIABLE VARIABLE=global_offset_z VALUE={new_offset}
        RESPOND MSG="Saved global Z offset as {new_offset}"
    {% elif params.Z_ADJUST is defined %}
        {% set new_offset = (params.Z_ADJUST|float + current_z)|round(4) %}
        SAVE_VARIABLE VARIABLE=global_offset_z VALUE={new_offset}
        RESPOND MSG="Saved global Z offset as {new_offset}"
    {% endif %}

[gcode_macro APPLY_OFFSETS]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set x1 = svv.get("extruder1_offset_x", 0)|float %}
    {% set y1 = svv.get("extruder1_offset_y", 0)|float %}
    {% set z1 = svv.get("extruder1_offset_z", 0)|float %}
    {% set z = svv.get("global_offset_z", 0)|float %}
    {% set move = params.MOVE|default(0)|int %}
    {% if params.EXTRUDER == 'extruder' %}
        SET_GCODE_OFFSET X=0 Y=0 Z={z} MOVE={move}
        # RESPOND MSG="Extruder is 'extruder' so setting gcode offsets to X=0 Y=0 Z={z} MOVE={move}"
    {% elif params.EXTRUDER == 'extruder1' %}
        {% set offset_z = z1 + z %}
        SET_GCODE_OFFSET X={x1} Y={y1} Z={offset_z} MOVE={move}
        # RESPOND MSG="Extruder is 'extruder' so setting gcode offsets to X={x1} Y={y1} Z={offset_z} MOVE={move}"
    {% elif params.EXTRUDER is not defined %}
        { action_raise_error("Please provide an EXTRUDER= argument to APPLY_OFFSETS") }
    {% else %}
        { action_raise_error("Unknown extruder {params.EXTRUDER}") }
    {% endif %}

[gcode_macro GET_EXTRUDER_READY_FOR_ENTERING_PARKING]
variable_retraction: 50
variable_cooling_amount: 0
variable_extruder_cooled: 0
variable_extruder1_cooled: 0
variable_extruder_retracted: 0
variable_extruder1_retracted: 0
gcode:
    {% set extruder_name=params.EXTRUDER %}
    {% set extruder=printer[extruder_name] %}
    {% set retraction=printer["gcode_macro GET_EXTRUDER_READY_FOR_ENTERING_PARKING"].retraction|float %}
    {% set cooling_amount=printer["gcode_macro GET_EXTRUDER_READY_FOR_ENTERING_PARKING"].cooling_amount|float %}
    {% set cooled=printer["gcode_macro GET_EXTRUDER_READY_FOR_ENTERING_PARKING"]['%s_cooled' % extruder_name]|int %}
    {% set retracted=printer["gcode_macro GET_EXTRUDER_READY_FOR_ENTERING_PARKING"]['%s_retracted' % extruder_name]|int %}
    RESPOND MSG="Getting {extruder_name} ready for parking. Cooled? {cooled}. Retracted? {retracted}"
    ; Retract a fair bit immediately so we get less oozing while parked:
    {% if not retracted and extruder.can_extrude|lower == 'true' %}
        RESPOND MSG="Retracting {extruder_name} by {retraction} in preparation for parking."
        SAVE_GCODE_STATE NAME=get_extruder_ready_for_entering_parking
        G91
        M83
        G1 E-{retraction} F5000
        RESTORE_GCODE_STATE NAME=get_extruder_ready_for_entering_parking
        SET_GCODE_VARIABLE MACRO=GET_EXTRUDER_READY_FOR_ENTERING_PARKING VARIABLE={extruder_name}_retracted VALUE=1
    {% endif %}
    ; Cool it down if it's not already cooled, and it's heated (i.e. there's a target > 0)
    {% if cooling_amount > 0 and not cooled and extruder.target > 0 %}
        SAVE_GCODE_STATE NAME=get_extruder_ready_for_entering_parking
        {% set cooled_temp=extruder.target|float - cooling_amount %}
        RESPOND MSG="Cooling {extruder_name} to {cooled_temp} in preparation for parking."
        M104 S{cooled_temp}
        RESTORE_GCODE_STATE NAME=get_extruder_ready_for_entering_parking
        SET_GCODE_VARIABLE MACRO=GET_EXTRUDER_READY_FOR_ENTERING_PARKING VARIABLE={extruder_name}_cooled VALUE=1
    {% endif %}


[gcode_macro GET_EXTRUDER_READY_FOR_LEAVING_PARKING]
gcode:
    {% set extruder_name=params.EXTRUDER %}
    {% set extruder=printer[extruder_name] %}
    {% set retraction=printer["gcode_macro GET_EXTRUDER_READY_FOR_ENTERING_PARKING"].retraction|float %}
    {% set cooling_amount=printer["gcode_macro GET_EXTRUDER_READY_FOR_ENTERING_PARKING"].cooling_amount|float %}
    {% set cooled=printer["gcode_macro GET_EXTRUDER_READY_FOR_ENTERING_PARKING"]['%s_cooled' % extruder_name]|int %}
    {% set retracted=printer["gcode_macro GET_EXTRUDER_READY_FOR_ENTERING_PARKING"]['%s_retracted' % extruder_name]|int %}
    RESPOND MSG="Getting {extruder_name} ready for leaving park. Cooled? {cooled}. Retracted? {retracted}"
    ; Warm it up!
    {% if cooled %}
        SAVE_GCODE_STATE NAME=get_extruder_ready_for_entering_parking
        {% set uncooled_temp=extruder.target|float + cooling_amount %}
        RESPOND MSG="Warming {extruder_name} to {uncooled_temp} in preparation for leaving parking."
        M104 S{uncooled_temp}
        M109 S{uncooled_temp}
        RESTORE_GCODE_STATE NAME=get_extruder_ready_for_entering_parking
        SET_GCODE_VARIABLE MACRO=GET_EXTRUDER_READY_FOR_ENTERING_PARKING VARIABLE={extruder_name}_cooled VALUE=0
    {% endif %}
    ; Extrude to undo the retract we did:
    {% if retracted %}
        {% if extruder.can_extrude|lower == 'true' %}
            RESPOND MSG="Extruding {extruder_name} by {retraction} in preparation for leaving parking."
            SAVE_GCODE_STATE NAME=get_extruder_ready_for_entering_parking
            G91
            M83
            G1 E{retraction} F5000 ; Note this is too fast if we're actually extruding i.e. we weren't actually unextruded. Hence why START_PRINT sets us to be unretracted.
            RESTORE_GCODE_STATE NAME=get_extruder_ready_for_entering_parking
            SET_GCODE_VARIABLE MACRO=GET_EXTRUDER_READY_FOR_ENTERING_PARKING VARIABLE={extruder_name}_retracted VALUE=0
        {% else %}
            { action_raise_error("Trying to get %s ready for leaving parking and it not ready to extrude and it should be!" % extruder_name)}
        {% endif %}
    {% endif %}

[gcode_macro _T]
gcode:
    {% set extruder=params.EXTRUDER|default('') %}
    {% set other_extruder='' %}
    {% set carriage=-1 %}
    {% set extruder_fan=-1 %}
    {% set other_extruder_fan=-1 %}
    {% if extruder == 'extruder' %}
        {% set other_extruder='extruder1' %}
        {% set carriage=0 %}
        {% set extruder_fan=0 %}
        {% set other_extruder_fan=1 %}
    {% elif extruder == 'extruder1' %}
        {% set other_extruder='extruder' %}
        {% set carriage=1 %}
        {% set extruder_fan=1 %}
        {% set other_extruder_fan=0 %}
    {% elif extruder == '' %}
        { action_raise_error("Please provide an EXTRUDER= argument to _T") }
    {% else %}
        { action_raise_error("Unknown extruder {extruder}") }
    {% endif %}

    RESPOND MSG="-- Activating {extruder} --"

    ; Remove all offsets - do it now because e.g. the parks are defined with positions without offsets, etc.
    SET_GCODE_OFFSET X=0 Y=0 Z=0

    ; Park the current toolhead if needed:
    {% if printer.toolhead.extruder == other_extruder %}
        GET_EXTRUDER_READY_FOR_ENTERING_PARKING EXTRUDER={other_extruder}
        PARK EXTRUDER={other_extruder}
    {% endif %}
    
    ; Set the extruder fan to be the same speed as the current one, and turn this one off.
    # RESPOND MSG="Doing M106 P{extruder_fan} S{printer['gcode_macro M106']['%s_part_fan_speed_normalized' % other_extruder]}"
    {% set m106_speed = (printer["gcode_macro M106"]["%s_part_fan_speed_normalized" % other_extruder] | float) * 255 %}
    M106 P{extruder_fan} S{m106_speed}
    M107 P{other_extruder_fan}
    
    ; Normal klippering
    ACTIVATE_EXTRUDER_ORIGINAL EXTRUDER={extruder}
    SET_DUAL_CARRIAGE CARRIAGE={carriage}

    ; Apply our offsets:
    APPLY_OFFSETS EXTRUDER={extruder}

    ; Get our extruder ready to leave parking
    GET_EXTRUDER_READY_FOR_LEAVING_PARKING EXTRUDER={extruder}

[gcode_macro T0]
gcode:
    _T EXTRUDER=extruder


[gcode_macro T1]
gcode:
    _T EXTRUDER=extruder1


# [gcode_macro calibrate_separation]
# gcode:
#     G28
#     G90
#     M83
#     T0 ; test T0
#     G1 X120 Y150 Z.2 F4800
#     G1 Y75 E10
#     T1 ; test T1
#     G1 X120 Y0 Z.2
#     G1 Y75 E10


[gcode_macro ACTIVATE_EXTRUDER]
rename_existing: ACTIVATE_EXTRUDER_ORIGINAL
gcode:
    {% if params.EXTRUDER == 'extruder' %}
        T0
    {% elif params.EXTRUDER == 'extruder1' %}
        T1
    {% elif params.EXTRUDER is not defined %}
        { action_raise_error("Please provide an EXTRUDER= argument to ACTIVATE_EXTRUDER") }
    {% else %}
        { action_raise_error("Unknown extruder {params.EXTRUDER}") }
    {% endif %}